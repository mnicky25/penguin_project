---
title: "Penguins Model"
format:
  html:
    code-fold: true
---

```{python}
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
```

## Get Data

```{python}
df = penguins.load_penguins()
```

## Define Model and Fit

```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

## Get some information

```{python}
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

Convert to vetiver model

```{python}
import vetiver
import pins

# Assuming 'model' is your trained ML model and 'X' is your prototype data
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)

# Create an API for the model with prototype data checking enabled
app = VetiverAPI(v, check_prototype=True)

# Create or specify a board to pin your model
b = pins.board_folder('board', allow_pickle_read=True)

# Assuming you want to write the model to a pin
vetiver_pin_write(b, v, 'penguin_model')

# Load the model from a pin, if needed
v_loaded = VetiverModel.from_pin(b, 'penguin_model')

vetiver.prepare_docker(b, 'penguin_model')
```

```{DO NOT NEED TO RUN AGAIN}
import duckdb
from palmerpenguins import penguins

con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
```
