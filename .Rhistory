from vetiver import VetiverModel, VetiverAPI, vetiver_pin_write
import pins
# Assuming 'model' is your trained ML model and 'X' is your prototype data
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API for the model with prototype data checking enabled
app = VetiverAPI(v, check_prototype=True)
# Create or specify a board to pin your model
b = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(b, v, 'penguin_model')
# Load the model from a pin, if needed
v_loaded = VetiverModel.from_pin(b, 'penguin_model')
prepare_docker()
import vetiver
import pins
# Assuming 'model' is your trained ML model and 'X' is your prototype data
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API for the model with prototype data checking enabled
app = VetiverAPI(v, check_prototype=True)
# Create or specify a board to pin your model
b = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(b, v, 'penguin_model')
# Load the model from a pin, if needed
v_loaded = VetiverModel.from_pin(b, 'penguin_model')
prepare_docker()
import vetiver
import pins
# Assuming 'model' is your trained ML model and 'X' is your prototype data
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API for the model with prototype data checking enabled
app = VetiverAPI(v, check_prototype=True)
# Create or specify a board to pin your model
b = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(b, v, 'penguin_model')
# Load the model from a pin, if needed
v_loaded = VetiverModel.from_pin(b, 'penguin_model')
vetiver.prepare_docker()
import vetiver
import pins
# Assuming 'model' is your trained ML model and 'X' is your prototype data
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API for the model with prototype data checking enabled
app = VetiverAPI(v, check_prototype=True)
# Create or specify a board to pin your model
b = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(b, v, 'penguin_model')
# Load the model from a pin, if needed
v_loaded = VetiverModel.from_pin(b, 'penguin_model')
vetiver.prepare_docker(b, 'penguin_model')
quit
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
DBI::dbDisconnect(con)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import duckdb
from palmerpenguins import load_penguins
# Connect to DuckDB
con = duckdb.connect('my-db.duckdb')
# Load the penguins dataset into a DataFrame
df = load_penguins()
# Register the DataFrame with DuckDB
con.register('penguins_df', df)
# Use the registered DataFrame in a SQL command to create a new table
con.execute('CREATE TABLE penguins AS SELECT * FROM penguins_df')
# Close the connection
con.close()
import duckdb
from palmerpenguins import load_penguins
# Load the penguins dataset into a DataFrame
df = load_penguins()
# Connect to DuckDB
con = duckdb.connect('my-db.duckdb')
# Create a table directly from the DataFrame
con.execute('CREATE TABLE penguins AS SELECT * FROM ?', [df])
# Close the connection
con.close()
import duckdb
from palmerpenguins import load_penguins
# Load the penguins dataset into a DataFrame
df = load_penguins()
# Connect to DuckDB
con = duckdb.connect('my-db.duckdb')
# Create a table directly from the DataFrame
con.execute('CREATE TABLE penguins AS SELECT * FROM ?', [df])
# Close the connection
con.close()
import duckdb
from palmerpenguins import load_penguins
try:
# Load the penguins dataset into a DataFrame
df = load_penguins()
# Connect to DuckDB
con = duckdb.connect('my-db.duckdb')
print("Connected to database successfully.")
# Execute SQL command to create a table
con.execute('CREATE TABLE penguins AS SELECT * FROM ?', [df])
print("Table created successfully.")
except Exception as e:
print(f"An error occurred: {e}")
finally:
# Ensure the connection is closed properly
if 'con' in locals():
con.close()
print("Database connection closed.")
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import duckdb
from palmerpenguins import load_penguins
try:
df = load_penguins()
with duckdb.connect('my-db.duckdb') as con:
con.execute("CREATE SCHEMA IF NOT EXISTS main")
con.register('penguins_df', df)
con.execute('CREATE TABLE main.penguins AS SELECT * FROM penguins_df')
except Exception as e:
print(f"An error occurred: {e}")
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
from palmerpenguins import load_penguins
try:
df = load_penguins()
with duckdb.connect('my-db.duckdb') as con:
con.execute("CREATE SCHEMA IF NOT EXISTS main")
con.register('penguins_df', df)
con.execute('CREATE TABLE main.penguins AS SELECT * FROM penguins_df')
except Exception as e:
print(f"An error occurred: {e}")
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import vetiver
import pins
# Assuming 'model' is your trained ML model and 'X' is your prototype data
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
# Create an API for the model with prototype data checking enabled
app = VetiverAPI(v, check_prototype=True)
# Create or specify a board to pin your model
b = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(b, v, 'penguin_model')
# Load the model from a pin, if needed
v_loaded = VetiverModel.from_pin(b, 'penguin_model')
vetiver.prepare_docker(b, 'penguin_model')
con.close()
con.close()
con.close()
con.close()
df = penguins.load_penguins()
quit
DBI::dbDisconnect(con)
library(dplyr)
library(ggplot2)
library(dbplyr)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
DBI::dbDisconnect(con)
reticulate::repl_python()
import duckdb
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
import duckdb
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
reticulate::repl_python()
import duckdb
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
install.packages(Shiny)
import duckdb
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
install.packages(Shiny)
install.packages.("Shiny")
install.packages("Shiny")
install.packages("shiny")
renv::snapshot()
?renv::dependencies()
reticulate::repl_python()
app = App(app_ui, server)
app = shiny.App(app_ui, server)
from shiny import App, render, ui, reactive
python app.py
api = vetiver_api.app
import requests
quit
library(shiny); runApp('app-api.R')
reticulate::repl_python()
import duckdb
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
from vetiver import VetiverModel
V = VetiverModel(model, model_name = "penguin_model", prototype_data = X)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
from vetiver import prepare_docker
prepare_docker(model_board, "penguin_model")
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
from vetiver import VetiverModel
V = VetiverModel(model, model_name = "penguin_model", prototype_data = X)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
reticulate::repl_python()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
import duckdb
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
import duckdb
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
from vetiver import VetiverModel
V = VetiverModel(model, model_name = "penguin_model", prototype_data = X)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
#vetiver_pin_write(model_board, v)
from vetiver import pins
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
from vetiver import pins
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
#vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
#vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
#vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
from vetiver import VetiverModel
V = VetiverModel(model, model_name = "penguin_model", prototype_data = X)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
pip freeze > requirements.txt
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
model_board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(model_board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
b = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(b, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(board, v)
from pins import board_folder
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(board, V)
import pins
from vetiver import vetiver_pin_write
# Create or specify a board to pin your model
board = pins.board_folder('board', allow_pickle_read=True)
# Assuming you want to write the model to a pin
vetiver_pin_write(board, V)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
from vetiver import VetiverAPI
app = VetiverAPI(V, check_prototype = True)
from vetiver import VetiverModel
from dotenv import load_dotenv, find_dotenv
import vetiver
import pins
load_dotenv(find_dotenv())
b = pins.board_folder('board', allow_pickle_read=True)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240417T163307Z-a6f9b')
app = VetiverAPI(v, check_prototype=True)
app.run(port = 8080)
quit
library(shiny); runApp('app-api.R')
reticulate::repl_python()
from palmerpenguins import penguins
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins()
df = df.dropna()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
df = penguins.load_penguins()
df = df.dropna()
X = pd.get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
install.packages("tidy")
quit
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(tidy)
install.packages(tidy)
install.packages("tidy")
install.packages("tidymodels")
df <- palmerpenguins::penguins
head(df)
knn_spec <- nearest_neighbor(neighbors = 3) %>%
set_mode("classification") %>%
set_engine("kknn")
knn_spec <- nearest_neighbor(neighbors = 3) %>%
set_mode("classification") %>%
set_engine("kknn")
packages.install("parsnip")
install.packages("parsnip")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(tidymodels)
library(parsnip)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(tidymodels)
library(parsnip)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(tidymodels)
library(parsnip)
df <- palmerpenguins::penguins
head(df)
knn_spec <- nearest_neighbor(neighbors = 3) %>%
set_mode("classification") %>%
set_engine("kknn")
knn_fit <- knn_spec %>%
fit(species ~ bill_depth_mm + flipper_length_mm + body_mass_g, data = df)
parsnip:::check_installs(kknn)
parsnip:::check_installs("kknn")
install.packages("kknn")
knn_fit <- knn_spec %>%
fit(species ~ bill_depth_mm + flipper_length_mm + body_mass_g, data = df)
quarto render Model.qmd
qarto render "Model.qmd"
quarto render "Model.qmd"
renv::snapshot()
